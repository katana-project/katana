// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
	"net/http"

	"github.com/go-faster/errors"

	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
)

const (
	WriterCtxKey  = "writer"
	RequestCtxKey = "request"
)

// doneWriter is a http.ResponseWriter that captures whether data has been written to it.
type doneWriter struct {
	http.ResponseWriter
	done bool
}

func (w *doneWriter) WriteHeader(status int) {
	w.done = true
	w.ResponseWriter.WriteHeader(status)
}
func (w *doneWriter) Write(b []byte) (int, error) {
	w.done = true
	return w.ResponseWriter.Write(b)
}

func recordError(string, error) {}

// handleGetRepoByIdRequest handles getRepoById operation.
//
// Gets a repository by its ID.
//
// GET /repos/{id}
func (s *Server) handleGetRepoByIdRequest(args [1]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	dw := &doneWriter{ResponseWriter: w}
	ctx = context.WithValue(context.WithValue(ctx, WriterCtxKey, dw), RequestCtxKey, r)

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "GetRepoById",
			ID:   "getRepoById",
		}
	)
	params, err := decodeGetRepoByIdParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response GetRepoByIdRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    "GetRepoById",
			OperationSummary: "Gets a repository.",
			OperationID:      "getRepoById",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "id",
					In:   "path",
				}: params.ID,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = GetRepoByIdParams
			Response = GetRepoByIdRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackGetRepoByIdParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.GetRepoById(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.GetRepoById(ctx, params)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if dw.done { // handler already wrote response manually, skip wrapper encoding
		return
	}
	if err := encodeGetRepoByIdResponse(response, w); err != nil {
		recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleGetRepoMediaRequest handles getRepoMedia operation.
//
// Gets a repository by its ID and lists its media.
//
// GET /repos/{id}/media
func (s *Server) handleGetRepoMediaRequest(args [1]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	dw := &doneWriter{ResponseWriter: w}
	ctx = context.WithValue(context.WithValue(ctx, WriterCtxKey, dw), RequestCtxKey, r)

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "GetRepoMedia",
			ID:   "getRepoMedia",
		}
	)
	params, err := decodeGetRepoMediaParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response GetRepoMediaRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    "GetRepoMedia",
			OperationSummary: "Lists a repository's media.",
			OperationID:      "getRepoMedia",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "id",
					In:   "path",
				}: params.ID,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = GetRepoMediaParams
			Response = GetRepoMediaRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackGetRepoMediaParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.GetRepoMedia(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.GetRepoMedia(ctx, params)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if dw.done { // handler already wrote response manually, skip wrapper encoding
		return
	}
	if err := encodeGetRepoMediaResponse(response, w); err != nil {
		recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleGetRepoMediaByIdRequest handles getRepoMediaById operation.
//
// Gets media by its ID in a repository.
//
// GET /repos/{repoId}/media/{mediaId}
func (s *Server) handleGetRepoMediaByIdRequest(args [2]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	dw := &doneWriter{ResponseWriter: w}
	ctx = context.WithValue(context.WithValue(ctx, WriterCtxKey, dw), RequestCtxKey, r)

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "GetRepoMediaById",
			ID:   "getRepoMediaById",
		}
	)
	params, err := decodeGetRepoMediaByIdParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response GetRepoMediaByIdRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    "GetRepoMediaById",
			OperationSummary: "Gets a repository's media.",
			OperationID:      "getRepoMediaById",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "repoId",
					In:   "path",
				}: params.RepoId,
				{
					Name: "mediaId",
					In:   "path",
				}: params.MediaId,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = GetRepoMediaByIdParams
			Response = GetRepoMediaByIdRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackGetRepoMediaByIdParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.GetRepoMediaById(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.GetRepoMediaById(ctx, params)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if dw.done { // handler already wrote response manually, skip wrapper encoding
		return
	}
	if err := encodeGetRepoMediaByIdResponse(response, w); err != nil {
		recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleGetRepoMediaStreamRequest handles getRepoMediaStream operation.
//
// Gets media by its ID in a repository and returns an HTTP media stream of the file.
//
// GET /repos/{repoId}/media/{mediaId}/stream/{format}
func (s *Server) handleGetRepoMediaStreamRequest(args [3]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	dw := &doneWriter{ResponseWriter: w}
	ctx = context.WithValue(context.WithValue(ctx, WriterCtxKey, dw), RequestCtxKey, r)

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: "GetRepoMediaStream",
			ID:   "getRepoMediaStream",
		}
	)
	params, err := decodeGetRepoMediaStreamParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response GetRepoMediaStreamRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    "GetRepoMediaStream",
			OperationSummary: "Gets a HTTP media stream.",
			OperationID:      "getRepoMediaStream",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "repoId",
					In:   "path",
				}: params.RepoId,
				{
					Name: "mediaId",
					In:   "path",
				}: params.MediaId,
				{
					Name: "format",
					In:   "path",
				}: params.Format,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = GetRepoMediaStreamParams
			Response = GetRepoMediaStreamRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackGetRepoMediaStreamParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.GetRepoMediaStream(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.GetRepoMediaStream(ctx, params)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if dw.done { // handler already wrote response manually, skip wrapper encoding
		return
	}
	if err := encodeGetRepoMediaStreamResponse(response, w); err != nil {
		recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleGetReposRequest handles getRepos operation.
//
// Lists all repositories currently known to the server.
//
// GET /repos
func (s *Server) handleGetReposRequest(args [0]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	dw := &doneWriter{ResponseWriter: w}
	ctx = context.WithValue(context.WithValue(ctx, WriterCtxKey, dw), RequestCtxKey, r)

	var (
		err error
	)

	var response []Repository
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    "GetRepos",
			OperationSummary: "Lists repositories.",
			OperationID:      "getRepos",
			Body:             nil,
			Params:           middleware.Parameters{},
			Raw:              r,
		}

		type (
			Request  = struct{}
			Params   = struct{}
			Response = []Repository
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			nil,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.GetRepos(ctx)
				return response, err
			},
		)
	} else {
		response, err = s.h.GetRepos(ctx)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if dw.done { // handler already wrote response manually, skip wrapper encoding
		return
	}
	if err := encodeGetReposResponse(response, w); err != nil {
		recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}
