// Code generated by ogen, DO NOT EDIT.

package v1

import (
	"github.com/go-faster/jx"

	std "encoding/json"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestCastMember_EncodeDecode(t *testing.T) {
	var typ CastMember
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CastMember
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestEpisodeMetadata_EncodeDecode(t *testing.T) {
	var typ EpisodeMetadata
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 EpisodeMetadata
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestError_EncodeDecode(t *testing.T) {
	var typ Error
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 Error
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestErrorType_EncodeDecode(t *testing.T) {
	var typ ErrorType
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ErrorType
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRepoMediaOKApplicationJSON_EncodeDecode(t *testing.T) {
	var typ GetRepoMediaOKApplicationJSON
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRepoMediaOKApplicationJSON
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestImage_EncodeDecode(t *testing.T) {
	var typ Image
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 Image
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestImageType_EncodeDecode(t *testing.T) {
	var typ ImageType
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ImageType
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestMedia_EncodeDecode(t *testing.T) {
	var typ Media
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 Media
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestMediaMeta_EncodeDecode(t *testing.T) {
	var typ MediaMeta
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 MediaMeta
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestMetadata_EncodeDecode(t *testing.T) {
	var typ Metadata
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 Metadata
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestMovieMetadata_EncodeDecode(t *testing.T) {
	var typ MovieMetadata
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 MovieMetadata
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestRepository_EncodeDecode(t *testing.T) {
	var typ Repository
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 Repository
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestRepositoryCapability_EncodeDecode(t *testing.T) {
	var typ RepositoryCapability
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 RepositoryCapability
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSeriesMetadata_EncodeDecode(t *testing.T) {
	var typ SeriesMetadata
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SeriesMetadata
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
