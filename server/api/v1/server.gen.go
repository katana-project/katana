// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package v1

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Lists repositories.
	// (GET /repos)
	GetRepos(w http.ResponseWriter, r *http.Request)
	// Gets a repository.
	// (GET /repos/{id})
	GetRepoById(w http.ResponseWriter, r *http.Request, id string)
	// Lists a repository's media.
	// (GET /repos/{id}/media)
	GetRepoMedia(w http.ResponseWriter, r *http.Request, id string, params GetRepoMediaParams)
	// Gets a repository's media.
	// (GET /repos/{repoId}/media/{mediaId})
	GetRepoMediaById(w http.ResponseWriter, r *http.Request, repoId string, mediaId string)
	// Lists the available variants of a repository's media.
	// (GET /repos/{repoId}/media/{mediaId}/stream)
	GetRepoMediaStreams(w http.ResponseWriter, r *http.Request, repoId string, mediaId string)
	// Gets a HTTP media stream.
	// (GET /repos/{repoId}/media/{mediaId}/stream/{format})
	GetRepoMediaStream(w http.ResponseWriter, r *http.Request, repoId string, mediaId string, format MediaFormatType)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Lists repositories.
// (GET /repos)
func (_ Unimplemented) GetRepos(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Gets a repository.
// (GET /repos/{id})
func (_ Unimplemented) GetRepoById(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Lists a repository's media.
// (GET /repos/{id}/media)
func (_ Unimplemented) GetRepoMedia(w http.ResponseWriter, r *http.Request, id string, params GetRepoMediaParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Gets a repository's media.
// (GET /repos/{repoId}/media/{mediaId})
func (_ Unimplemented) GetRepoMediaById(w http.ResponseWriter, r *http.Request, repoId string, mediaId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Lists the available variants of a repository's media.
// (GET /repos/{repoId}/media/{mediaId}/stream)
func (_ Unimplemented) GetRepoMediaStreams(w http.ResponseWriter, r *http.Request, repoId string, mediaId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Gets a HTTP media stream.
// (GET /repos/{repoId}/media/{mediaId}/stream/{format})
func (_ Unimplemented) GetRepoMediaStream(w http.ResponseWriter, r *http.Request, repoId string, mediaId string, format MediaFormatType) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetRepos operation middleware
func (siw *ServerInterfaceWrapper) GetRepos(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRepos(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRepoById operation middleware
func (siw *ServerInterfaceWrapper) GetRepoById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRepoById(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRepoMedia operation middleware
func (siw *ServerInterfaceWrapper) GetRepoMedia(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRepoMediaParams

	// ------------- Optional query parameter "images" -------------

	err = runtime.BindQueryParameter("form", true, false, "images", r.URL.Query(), &params.Images)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "images", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRepoMedia(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRepoMediaById operation middleware
func (siw *ServerInterfaceWrapper) GetRepoMediaById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "repoId" -------------
	var repoId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "repoId", runtime.ParamLocationPath, chi.URLParam(r, "repoId"), &repoId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "repoId", Err: err})
		return
	}

	// ------------- Path parameter "mediaId" -------------
	var mediaId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "mediaId", runtime.ParamLocationPath, chi.URLParam(r, "mediaId"), &mediaId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "mediaId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRepoMediaById(w, r, repoId, mediaId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRepoMediaStreams operation middleware
func (siw *ServerInterfaceWrapper) GetRepoMediaStreams(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "repoId" -------------
	var repoId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "repoId", runtime.ParamLocationPath, chi.URLParam(r, "repoId"), &repoId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "repoId", Err: err})
		return
	}

	// ------------- Path parameter "mediaId" -------------
	var mediaId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "mediaId", runtime.ParamLocationPath, chi.URLParam(r, "mediaId"), &mediaId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "mediaId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRepoMediaStreams(w, r, repoId, mediaId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRepoMediaStream operation middleware
func (siw *ServerInterfaceWrapper) GetRepoMediaStream(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "repoId" -------------
	var repoId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "repoId", runtime.ParamLocationPath, chi.URLParam(r, "repoId"), &repoId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "repoId", Err: err})
		return
	}

	// ------------- Path parameter "mediaId" -------------
	var mediaId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "mediaId", runtime.ParamLocationPath, chi.URLParam(r, "mediaId"), &mediaId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "mediaId", Err: err})
		return
	}

	// ------------- Path parameter "format" -------------
	var format MediaFormatType

	err = runtime.BindStyledParameterWithLocation("simple", false, "format", runtime.ParamLocationPath, chi.URLParam(r, "format"), &format)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "format", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRepoMediaStream(w, r, repoId, mediaId, format)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/repos", wrapper.GetRepos)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/repos/{id}", wrapper.GetRepoById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/repos/{id}/media", wrapper.GetRepoMedia)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/repos/{repoId}/media/{mediaId}", wrapper.GetRepoMediaById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/repos/{repoId}/media/{mediaId}/stream", wrapper.GetRepoMediaStreams)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/repos/{repoId}/media/{mediaId}/stream/{format}", wrapper.GetRepoMediaStream)
	})

	return r
}

type GetReposRequestObject struct {
}

type GetReposResponseObject interface {
	VisitGetReposResponse(w http.ResponseWriter, r *http.Request) error
}

type GetRepos200JSONResponse []Repository

func (response GetRepos200JSONResponse) VisitGetReposResponse(w http.ResponseWriter, _ *http.Request) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRepoByIdRequestObject struct {
	Id string `json:"id"`
}

type GetRepoByIdResponseObject interface {
	VisitGetRepoByIdResponse(w http.ResponseWriter, r *http.Request) error
}

type GetRepoById200JSONResponse Repository

func (response GetRepoById200JSONResponse) VisitGetRepoByIdResponse(w http.ResponseWriter, _ *http.Request) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRepoById400JSONResponse Error

func (response GetRepoById400JSONResponse) VisitGetRepoByIdResponse(w http.ResponseWriter, _ *http.Request) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRepoMediaRequestObject struct {
	Id     string `json:"id"`
	Params GetRepoMediaParams
}

type GetRepoMediaResponseObject interface {
	VisitGetRepoMediaResponse(w http.ResponseWriter, r *http.Request) error
}

type GetRepoMedia200JSONResponse []Media

func (response GetRepoMedia200JSONResponse) VisitGetRepoMediaResponse(w http.ResponseWriter, _ *http.Request) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRepoMedia400JSONResponse Error

func (response GetRepoMedia400JSONResponse) VisitGetRepoMediaResponse(w http.ResponseWriter, _ *http.Request) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRepoMediaByIdRequestObject struct {
	RepoId  string `json:"repoId"`
	MediaId string `json:"mediaId"`
}

type GetRepoMediaByIdResponseObject interface {
	VisitGetRepoMediaByIdResponse(w http.ResponseWriter, r *http.Request) error
}

type GetRepoMediaById200JSONResponse Media

func (response GetRepoMediaById200JSONResponse) VisitGetRepoMediaByIdResponse(w http.ResponseWriter, _ *http.Request) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRepoMediaById400JSONResponse Error

func (response GetRepoMediaById400JSONResponse) VisitGetRepoMediaByIdResponse(w http.ResponseWriter, _ *http.Request) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRepoMediaStreamsRequestObject struct {
	RepoId  string `json:"repoId"`
	MediaId string `json:"mediaId"`
}

type GetRepoMediaStreamsResponseObject interface {
	VisitGetRepoMediaStreamsResponse(w http.ResponseWriter, r *http.Request) error
}

type GetRepoMediaStreams200JSONResponse []MediaVariant

func (response GetRepoMediaStreams200JSONResponse) VisitGetRepoMediaStreamsResponse(w http.ResponseWriter, _ *http.Request) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRepoMediaStreams400JSONResponse Error

func (response GetRepoMediaStreams400JSONResponse) VisitGetRepoMediaStreamsResponse(w http.ResponseWriter, _ *http.Request) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRepoMediaStreamRequestObject struct {
	RepoId  string          `json:"repoId"`
	MediaId string          `json:"mediaId"`
	Format  MediaFormatType `json:"format"`
}

type GetRepoMediaStreamResponseObject interface {
	VisitGetRepoMediaStreamResponse(w http.ResponseWriter, r *http.Request) error
}

type GetRepoMediaStream200ResponseHeaders struct {
	ContentDisposition string
	ContentType        string
}

type GetRepoMediaStream200SchemaResponse struct {
	Body          io.Reader
	Headers       GetRepoMediaStream200ResponseHeaders
	ContentLength int64
}

func (response GetRepoMediaStream200SchemaResponse) VisitGetRepoMediaStreamResponse(w http.ResponseWriter, _ *http.Request) error {
	w.Header().Set("Content-Type", "schema")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("Content-Disposition", fmt.Sprint(response.Headers.ContentDisposition))
	w.Header().Set("Content-Type", fmt.Sprint(response.Headers.ContentType))
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetRepoMediaStream400JSONResponse Error

func (response GetRepoMediaStream400JSONResponse) VisitGetRepoMediaStreamResponse(w http.ResponseWriter, _ *http.Request) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Lists repositories.
	// (GET /repos)
	GetRepos(ctx context.Context, request GetReposRequestObject) (GetReposResponseObject, error)
	// Gets a repository.
	// (GET /repos/{id})
	GetRepoById(ctx context.Context, request GetRepoByIdRequestObject) (GetRepoByIdResponseObject, error)
	// Lists a repository's media.
	// (GET /repos/{id}/media)
	GetRepoMedia(ctx context.Context, request GetRepoMediaRequestObject) (GetRepoMediaResponseObject, error)
	// Gets a repository's media.
	// (GET /repos/{repoId}/media/{mediaId})
	GetRepoMediaById(ctx context.Context, request GetRepoMediaByIdRequestObject) (GetRepoMediaByIdResponseObject, error)
	// Lists the available variants of a repository's media.
	// (GET /repos/{repoId}/media/{mediaId}/stream)
	GetRepoMediaStreams(ctx context.Context, request GetRepoMediaStreamsRequestObject) (GetRepoMediaStreamsResponseObject, error)
	// Gets a HTTP media stream.
	// (GET /repos/{repoId}/media/{mediaId}/stream/{format})
	GetRepoMediaStream(ctx context.Context, request GetRepoMediaStreamRequestObject) (GetRepoMediaStreamResponseObject, error)
}
type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetRepos operation middleware
func (sh *strictHandler) GetRepos(w http.ResponseWriter, r *http.Request) {
	var request GetReposRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRepos(ctx, request.(GetReposRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRepos")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetReposResponseObject); ok {
		if err := validResponse.VisitGetReposResponse(w, r); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRepoById operation middleware
func (sh *strictHandler) GetRepoById(w http.ResponseWriter, r *http.Request, id string) {
	var request GetRepoByIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRepoById(ctx, request.(GetRepoByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRepoById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRepoByIdResponseObject); ok {
		if err := validResponse.VisitGetRepoByIdResponse(w, r); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRepoMedia operation middleware
func (sh *strictHandler) GetRepoMedia(w http.ResponseWriter, r *http.Request, id string, params GetRepoMediaParams) {
	var request GetRepoMediaRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRepoMedia(ctx, request.(GetRepoMediaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRepoMedia")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRepoMediaResponseObject); ok {
		if err := validResponse.VisitGetRepoMediaResponse(w, r); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRepoMediaById operation middleware
func (sh *strictHandler) GetRepoMediaById(w http.ResponseWriter, r *http.Request, repoId string, mediaId string) {
	var request GetRepoMediaByIdRequestObject

	request.RepoId = repoId
	request.MediaId = mediaId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRepoMediaById(ctx, request.(GetRepoMediaByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRepoMediaById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRepoMediaByIdResponseObject); ok {
		if err := validResponse.VisitGetRepoMediaByIdResponse(w, r); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRepoMediaStreams operation middleware
func (sh *strictHandler) GetRepoMediaStreams(w http.ResponseWriter, r *http.Request, repoId string, mediaId string) {
	var request GetRepoMediaStreamsRequestObject

	request.RepoId = repoId
	request.MediaId = mediaId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRepoMediaStreams(ctx, request.(GetRepoMediaStreamsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRepoMediaStreams")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRepoMediaStreamsResponseObject); ok {
		if err := validResponse.VisitGetRepoMediaStreamsResponse(w, r); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRepoMediaStream operation middleware
func (sh *strictHandler) GetRepoMediaStream(w http.ResponseWriter, r *http.Request, repoId string, mediaId string, format MediaFormatType) {
	var request GetRepoMediaStreamRequestObject

	request.RepoId = repoId
	request.MediaId = mediaId
	request.Format = format

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRepoMediaStream(ctx, request.(GetRepoMediaStreamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRepoMediaStream")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRepoMediaStreamResponseObject); ok {
		if err := validResponse.VisitGetRepoMediaStreamResponse(w, r); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
