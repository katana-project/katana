// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// GetRepoById implements getRepoById operation.
	//
	// Gets a repository by its ID.
	//
	// GET /repos/{id}
	GetRepoById(ctx context.Context, params GetRepoByIdParams) (GetRepoByIdRes, error)
	// GetRepoMedia implements getRepoMedia operation.
	//
	// Gets a repository by its ID and lists its media.
	//
	// GET /repos/{id}/media
	GetRepoMedia(ctx context.Context, params GetRepoMediaParams) (GetRepoMediaRes, error)
	// GetRepoMediaById implements getRepoMediaById operation.
	//
	// Gets media by its ID in a repository.
	//
	// GET /repos/{repoId}/media/{mediaId}
	GetRepoMediaById(ctx context.Context, params GetRepoMediaByIdParams) (GetRepoMediaByIdRes, error)
	// GetRepoMediaStream implements getRepoMediaStream operation.
	//
	// Gets media by its ID in a repository and returns an HTTP media stream of the file.
	//
	// GET /repos/{repoId}/media/{mediaId}/stream/{format}
	GetRepoMediaStream(ctx context.Context, params GetRepoMediaStreamParams) (GetRepoMediaStreamRes, error)
	// GetRepos implements getRepos operation.
	//
	// Lists all repositories currently known to the server.
	//
	// GET /repos
	GetRepos(ctx context.Context) ([]Repository, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
